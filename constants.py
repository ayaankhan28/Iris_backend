newCode=[
    "import time",
    "import sys",
    "import asyncio",
    "import json",
    "import os",
    "import requests",
    "import numpy",
    "import os  # duplicated but newly added",
    "",
    "def fetch_data():",
    "    url = \"https://example.com/api\"",
    "    headers = {\"Authorization\": \"Bearer token\"}",
    "    response = requests.get(url, headers=headers)",
    "    return response.json()",
    "",
    "class OldProcessor:",
    "    def __init__(self):",
    "        self.state = \"idle\"",
    "        print(\"OldProcessor is now initialized and idle\")",
    "",
    "    def execute(self):",
    "        print(\"Executing updated processor\")",
    "",
    "def utility():",
    "    print(\"Utility function\")",
    "    return True",
    "",
    "def unused_function():",
    "    pass  # Function deprecated",
    "",
    "class NewProcessor:",
    "    def __init__(self):",
    "        self.status = \"ready\"",
    "",
    "    def process(self, data):",
    "        print(f\"Processing: {data}\")",
    "        if not data:",
    "            raise ValueError(\"No data provided\")",
    "",
    "def support():",
    "    print(\"New support system activated\")",
    "",
    "if __name__ == \"__main__\":",
    "    fetch_data()",
    "    processor = OldProcessor()",
    "    processor.execute()",
    "    utility()",
    "    support()",
    "    print(\"Script finished\")",
]
oldCode=[
    "import time",
    "import sys",
    "import asyncio",
    "from mcp import StdioServerParameters, ClientSession",
    "import requests",
    "import numpy",
    "",
    "def fetch_data():",
    "    url = \"https://example.com/api\"",
    "    response = requests.get(url)",
    "    return response.text",
    "",
    "class OldProcessor:",
    "    def __init__(self):",
    "        self.state = \"idle\"",
    "        print(\"OldProcessor initialized\")",
    "",
    "    def run(self):",
    "        print(\"Running old processor\")",
    "",
    "def utility():",
    "    print(\"Utility function\")",
    "    return True",
    "",
    "def unused_function():",
    "    print(\"This function is no longer needed\")",
    "    return False",
    "",
    "class NewProcessor:",
    "    def __init__(self):",
    "        self.status = \"ready\"",
    "",
    "    def process(self, data):",
    "        print(f\"Processing: {data}\")",
    "",
    "def legacy_support():",
    "    print(\"Legacy system activated\")",
    "",
    "if __name__ == \"__main__\":",
    "    fetch_data()",
    "    processor = OldProcessor()",
    "    processor.run()",
    "    utility()",
    "    legacy_support()",
    "    print(\"Script finished\")",
]
oldCode1 = [
    "import requests",
    "import time",
    "",
    "def get_data():",
    "    url = 'https://api.example.com/data'",
    "    response = requests.get(url)",
    "    return response.text",
    "",
    "result = get_data()",
    "print(result)",
]
newCode1 = [
    "import requests",
    "import datetime",
    "",
    "def fetch_data():",
    "    url = 'https://api.example.com/data'",
    "    headers = {'Accept': 'application/json'}",
    "    response = requests.get(url, headers=headers)",
    "    return response.json()",
    "",
    "print(fetch_data())",
]
